// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or your preferred database
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  transactions  Transaction[]

  Budget Budget[]

  Receipt Receipt[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Transaction {
  id                 String   @id @default(cuid())
  amount             Float
  description        String
  date               DateTime
  type               TransactionType
  isRecurring        Boolean  @default(false)
  recurrenceInterval RecurrenceInterval @default(NONE)
  userId             String
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum RecurrenceInterval {
  NONE
  WEEKLY
  BIWEEKLY
  MONTHLY
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Budget {
  id                 String   @id @default(cuid())
  userId             String
  category           String
  amount             Float
  type               TransactionType
  period             BudgetPeriod
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, category, period])
}

enum BudgetPeriod {
  WEEKLY
  MONTHLY
  YEARLY
}

model Receipt {
  id                String   @id @default(cuid())
  userId            String
  transactionType   String
  recipientName     String?
  amount            Float
  currency          String
  date              DateTime
  referenceNumber   String
  paymentMethod     String
  accountNumber     String?
  additionalDetails Json?
  imageUrl          String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}